#ifndef _SPP_SERVER_H_
#define _SPP_SERVER_H_

#include "common.h"

#include <bluetooth/bluetooth.h>
#include <bluetooth/rfcomm.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/sdp.h>
#include <bluetooth/sdp_lib.h>
#include <ev.h>

///////////////////////////////////////////////////////////////////////////////
// macros
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// forward declarations
///////////////////////////////////////////////////////////////////////////////

class SPPConnection;

///////////////////////////////////////////////////////////////////////////////
// class declaration
///////////////////////////////////////////////////////////////////////////////

class SPPServer
{
    friend class SPPConnection;

///////////////////////////////////////////////////////////////////////////////
// type definitions
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// public function declarations
///////////////////////////////////////////////////////////////////////////////

public:

    SPPServer(uuid_t uuid);
    virtual ~SPPServer();


///////////////////////////////////////////////////////////////////////////////
// private function declarations
///////////////////////////////////////////////////////////////////////////////

private:

    static void socket_cb(EV_P_ ev_io *w, int revents);

///////////////////////////////////////////////////////////////////////////////
// private variable definitions
///////////////////////////////////////////////////////////////////////////////

    uuid_t m_uuid;
    struct ev_loop *m_loop_p;
    struct ev_io m_watcher;
    sdp_session_t *m_session_p;
    int m_socket;
    SPPConnection *m_connection_p;
};

#endif
