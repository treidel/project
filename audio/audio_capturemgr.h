#ifndef _AUDIO_CAPTUREMGR_H_
#define _AUDIO_CAPTUREMGR_H_

#include "common.h"

#include "audio_channel.h"

#include <list>
#include <ev.h>

///////////////////////////////////////////////////////////////////////////////
// macros
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// forward declarations
///////////////////////////////////////////////////////////////////////////////

class AUDIOCaptureInstance;
class AUDIOChannel;

///////////////////////////////////////////////////////////////////////////////
// class defition
///////////////////////////////////////////////////////////////////////////////

class AUDIOCaptureManager
{
	friend class AUDIOCaptureInstance;
	friend class AUDIOChannel;	

///////////////////////////////////////////////////////////////////////////////
// type defitions
///////////////////////////////////////////////////////////////////////////////

public:

	class Handler 
	{
	public:
		virtual ResultCode handle_samples(AUDIOChannel::Index index, const size_t buffer_length, AUDIOChannel::Sample *buffer_p) = 0;
	};

///////////////////////////////////////////////////////////////////////////////
// public function declarations
///////////////////////////////////////////////////////////////////////////////

public:

	static AUDIOCaptureManager *getInstance();

	virtual ~AUDIOCaptureManager();

	void addHandler(Handler *handler_p);

	void removeHandler(Handler *handler_p);

	size_t channel_count()
	{
		return m_channel_count;
	}

///////////////////////////////////////////////////////////////////////////////
// inner class declarations
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// private function declarations
///////////////////////////////////////////////////////////////////////////////

private:

	AUDIOCaptureManager();
	AUDIOChannel::Index allocate_index();

///////////////////////////////////////////////////////////////////////////////
// private variable definitions
///////////////////////////////////////////////////////////////////////////////

private:
	static AUDIOCaptureManager *g_instance_p;

	struct ev_loop *m_loop_p;
	std::list<Handler *> m_handlers;
	size_t m_channel_count;
	AUDIOCaptureInstance **m_instances;

};
#endif
