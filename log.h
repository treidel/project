#ifndef _LOG_H_
#define _LOG_H_

///////////////////////////////////////////////////////////////////////////////
// includes
///////////////////////////////////////////////////////////////////////////////

#include "common.h"

#include <stdarg.h>
#include <log4cxx/logger.h>

///////////////////////////////////////////////////////////////////////////////
// macros
///////////////////////////////////////////////////////////////////////////////

#define LOG_GENERATE_TRACE(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_TRACE, format, ##__VA_ARGS__);
#define LOG_GENERATE_DEBUG(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_DEBUG, format, ##__VA_ARGS__);
#define LOG_GENERATE_INFO(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_INFO, format, ##__VA_ARGS__);
#define LOG_GENERATE_WARN(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_WARNING, format, ##__VA_ARGS__);
#define LOG_GENERATE_ERROR(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_ERROR, format, ##__VA_ARGS__);
#define LOG_GENERATE_WTF(instance, format, ...) instance.generate(LogInstance::LOG_LEVEL_WTF, format, ##__VA_ARGS__);

///////////////////////////////////////////////////////////////////////////////
// forward declarations
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class declaration
///////////////////////////////////////////////////////////////////////////////

class LogInstance
{

///////////////////////////////////////////////////////////////////////////////
// type definitions
///////////////////////////////////////////////////////////////////////////////


public:

    typedef enum
    {
        LOG_LEVEL_TRACE = 0,
        LOG_LEVEL_DEBUG,
        LOG_LEVEL_INFO,
        LOG_LEVEL_WARNING,
        LOG_LEVEL_ERROR,
        LOG_LEVEL_WTF
    } LogLevel;

///////////////////////////////////////////////////////////////////////////////
// constants
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// public function declarations
///////////////////////////////////////////////////////////////////////////////

public:
    LogInstance(const char *name_p);
    ~LogInstance();

    static void set_global_level(LogLevel level);
    
    inline void generate(LogLevel level, const char *format_p, ...);

///////////////////////////////////////////////////////////////////////////////
// private function declarations
///////////////////////////////////////////////////////////////////////////////

private:

    void generate_internal(LogLevel level, const char *format_p, va_list va);

///////////////////////////////////////////////////////////////////////////////
// private variable declarations
///////////////////////////////////////////////////////////////////////////////

private:
    static LogLevel g_level;
    log4cxx::LoggerPtr m_logptr;

};

void LogInstance::generate(LogLevel level, const char *format_p, ...)
{
    // populate the variable argument list
    va_list va;
    va_start(va, format_p);

    // bail if the log level is too low
    if (g_level > level)
    {
        return;
    }

    // call the internal handler for the rest
    generate_internal(level, format_p, va);
}

#endif

